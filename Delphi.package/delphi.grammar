grammar {
	uuid = '{45379B26-1394-4E77-8018-54FDD3662677}';
	name = 'Delphi';
	filter = 'pas pp inc';
	developer = 'Garnet';
	version = '0.1';
	sample {
{ Syntax highlighting }
procedure TForm1.Button1Click(Sender: TObject);
var
  Number, I, X: Integer;
begin
  Number := 123456;
  Caption := 'The Number is' + #32 + IntToStr(Number);
  for I := 0 to Number do
  begin
    Inc(X);
    Dec(X);
    X := X + 1.0;
    X := X - $5E;
  end;
  Result := X;
  {$R+}
  asm
    mov AX, 1234H    // Comment
    jmp @sub
@sub:
    mov [Number], AX { Comment }
  end;
  {$R-}
end;
	}
	range {
		name = 'delphi';
		style = 'editor';
		style_symbol = 'symbol';
		style_number = 'number';
		rule {
			name = 'delphi.symbol_list1';
			style = '';
			options = '9';
			replace_pattern = '${s0}${s1}${s2}${s3}${s4}${s5}';
			pattern = '(?>^\s*?(?>procedure|function|PROCEDURE|FUNCTION)\s*?(?<s1>[\w_][\w\d\._]*))|(?>^\s*?(?<s0>[TE][A-Z][\w\d_]*)(?>\s*)?=(?>\s*)?(?>class|CLASS))|(?>^\s*?(?<s5>I[A-Z][\w\d_]*)(?>\s*)?=(?>\s*)?(?>interface|INTERFACE))|(?>^\s*?(?<s2>\w[\w\d]*)(?>\s*)?=(?>\s*)?(?>packed\s|PACKED\s)?(?>record|RECORD)\b(?>[^;]*)?$)|(?>^\s*?(?<s3>T[A-Z][\w\d_]*)(?>\s*)?=(?>\s*)?(?>\(|set))|(?>^\s*?(?<s4>[TP][A-Z][\w\d_]*)(?>\s*)?=(?>\s*)?(?>procedure|function|type|array|PROCEDURE|FUNCTION|TYPE|ARRAY|\^))';
			groups {
				{
					name = 'delphi.symbol_list1.s0';
					style = 'Default Packages';
				}
				{
					name = 'delphi.symbol_list1.s1';
					style = 'Function';
				}
				{
					name = 'delphi.symbol_list1.s2';
					style = 'Default Packages';
				}
				{
					name = 'delphi.symbol_list1.s3';
					style = 'Default Packages';
				}
				{
					name = 'delphi.symbol_list1.s5';
					style = 'Default Packages';
				}
				{
					name = 'delphi.symbol_list1.s4';
					style = 'Default Packages';
				}
			}
		}
		rule {
			name = 'delphi.char';
			style = 'character';
			pattern = '#[0-9]{1,3}\b';
		}
		rule {
			name = 'delphi.float';
			style = 'float';
			pattern = '\b[0-9]+\.[0-9]+\b';
		}
		rule {
			name = 'delphi.hex';
			style = 'hexadecimal';
			pattern = '\$[0-9A-F]{1,8}\b';
		}
		rule {
			name = 'delphi.function';
			style = 'function';
			pattern = '\b[\p{L}][\p{L}\d_]+([\s]+)?(?=\()';
		}
		rule {
			name = 'delphi.class';
			style = 'Default Packages';
			pattern = '\b[\p{L}]([\p{L}\d_]*)?([\s]*)?(?=\.)';
			priority = '1';
		}
		rule {
			name = 'delphi.symbol_list2';
			style = '';
			options = '8';
			replace_pattern = 'Declarations';
			pattern = '^(?<s0>type)';
		}
		keywords {
			name = 'delphi.keywords';
			style = 'keyword.delphi';
			{
absolute
abstract
and
array
as
asm
assembler
automated
begin
case
cdecl
class
const
constructor
contains
default
deprecated
destructor
dispid
dispinterface
div
do
downto
dynamic
else
end
except
export
exports
external
far
file
final
finalization
finally
for
forward
function
goto
helper
if
implementation
implements
in
index
inherited
initialization
inline
interface
is
label
library
message
mod
near
nil
nodefault
not
object
of
on
operator
or
out
overload
override
package
packed
pascal
platform
private
procedure
program
property
protected
public
published
raise
read
readonly
record
register
reintroduce
repeat
requires
resourcestring
result
safecall
sealed
set
shl
shr
stdcall
stored
string
stringresource
then
threadvar
to
try
type
unit
until
uses
var
virtual
while
with
write
writeonly
xor
			}
		}
		keywords {
			name = 'delphi.datatypes';
			style = 'variable';
			{
ansichar
ansistring
boolean
byte
cardinal
currency
char
double
extended
hwnd
int8
int16
int32
int64
integer
long
longword
longint
olevariant
pansichar
pchar
pint
pinteger
plong
pstring
puchar
pulong
pwchar
pwidechar
pword
real
shortint
shortstring
single
smallint
string
ucs2char
ucs4char
uint8
uint16
uint32
unt64
unicodestring
variant
widechar
widestring
word
			}
		}
		range {
			name = 'delphi.string';
			style = 'string';
			open {
				pattern = ''';
				options = '1';
			}
			close {
				pattern = ''';
				options = '1';
			}
			close {
				pattern = '$';
			}
		}
		range {
			name = 'delphi.single_comment';
			style = 'comment';
			open {
				pattern = '//';
				options = '1';
			}
			close {
				pattern = '$';
			}
		}
		range {
			name = 'delphi.multi_comment';
			style = 'comment';
			open {
				pattern = '\{[^\$]??';
				options = '1';
			}
			close {
				pattern = '\}';
				options = '1';
			}
		}
		range {
			name = 'delphi.pascal_comment';
			style = 'comment';
			open {
				pattern = '\(\*';
				options = '1';
			}
			close {
				pattern = '\*\)';
				options = '1';
			}
		}
		range {
			name = 'delphi.preprocessor';
			style = 'preprocessor';
			open {
				pattern = '\{\$';
				options = '1';
			}
			close {
				pattern = '\}';
				options = '1';
			}
		}
		range {
			name = 'delphi.basm';
			style = 'assembler';
			style_symbol = 'symbol';
			style_number = 'number';
			open {
				pattern = '\basm\b';
			}
			close {
				pattern = '\bend\b';
			}
			rule {
				name = 'delphi.basm.hexadecimal';
				style = 'hexadecimal';
				pattern = '[0-9A-F]{1,8}[H]\b';
			}
			rule {
				name = 'delphi.basm.subroutine';
				style = 'Function';
				pattern = '@[\p{L}\d_]+';
			}
			rule {
				name = 'delphi.basm.reference';
				style = 'Variable';
				pattern = '\[[\p{L}][\p{L}\d_]+\]';
			}
			keywords {
				name = 'delphi.basm.keywords';
				style = 'Second Reserved Word';
				{
aaa
aad
aam
adc
add
and
arpl
bound
bsf
bsr
bswap
bt
btc
btr
bts
call
cbw
cdq
clc
cld
cli
clts
cmc
cmp
cmps
cmpsb
cmpsd
cmpsw
cmpxchg
cwd
cwde
daa
das
db
dw
dec
div
emms
enter
f2xm1
fabs
fadd
faddp
fbld
fbstp
fchs
fclex
fcmovb
fcmovbe
fcmove
fcmovnb
fcmovnbe
fcmovne
fcmovnu
fcmovu
fcom
fcomi
fcomip
fcomp
fcompp
fcos
fdecstp
fdiv
fdivp
fdivr
fdivrp
femms
ffree
fiadd
ficom
ficomp
fidiv
fidivr
fild
fimul
fincstp
finit
fist
fistp
fisub
fisubr
fld
fld1
fldcw
fldenv
fldl2e
fldl2t
fldlg2
fldln2
fldpi
fldz
fmul
fmulp
fnclex
fninit
fnop
fnsave
fnstcw
fnstenv
fnstsw
fpatan
fprem1
fptan
frndint
frstor
fsave
fscale
fsin
fsincos
fsqrt
fst
fstcw
fstenv
fstp
fstsw
fsub
fsubp
fsubr
fsubrp
ftst
fucom
fucomi
fucomip
fucomp
fucompp
fwait
fxch
fxtract
fyl2xp1
hlt
idiv
imul
in
inc
ins
insb
insd
insw
int
into
invd
invlpg
iret
iretd
iretw
ja
jae
jb
jbe
jc
jcxz
je
jecxz
jg
jge
jl
jle
jmp
jna
jnae
jnb
jnbe
jnc
jne
jng
jnge
jnl
jnle
jno
jnp
jns
jnz
jo
jp
jpe
jpo
js
jz
lahf
lar
lds
lea
leave
les
lfs
lgdt
lgs
lidt
lldt
lmsw
lock
lods
lodsb
lodsd
lodsw
loop
loope
loopne
loopnz
loopz
lsl
lss
ltr
mov
movd
movq
movs
movsb
movsd
movsw
movsx
movzx
mul
neg
nop
not
or
out
outs
outsb
outsd
outsw
packssdw
packsswb
packuswb
paddb
paddd
paddsb
paddsw
paddusb
paddusw
paddw
pand
pandn
pavgusb
pcmpeqb
pcmpeqd
pcmpeqw
pcmpgtb
pcmpgtd
pcmpgtw
pf2id
pfacc
pfadd
pfcmpeq
pfcmpge
pfcmpgt
pfmax
pfmin
pfmul
pfrcp
pfrcpit1
pfrcpit2
pfrsqit1
pfrsqrt
pfsub
pfsubr
pi2fd
pmaddwd
pmulhrw
pmulhw
pmullw
pop
popa
popad
popaw
popf
popfd
popfw
por
prefetch
prefetchw
pslld
psllq
psllw
psrad
psraw
psrld
psrlq
psrlw
psubb
psubd
psubsb
psubsw
psubusb
psubusw
psubw
punpckhbw
punpckhdq
punpckhwd
punpcklbw
punpckldq
punpcklwd
push
pusha
pushad
pushaw
pushf
pushfd
pushfw
pxor
rcl
rcr
rep
repe
repne
repnz
repz
ret
rol
ror
sahf
sal
sar
sbb
scas
scasb
scasd
scasw
seta
setae
setb
setbe
setc
sete
setg
setge
setl
setle
setna
setnae
setnb
setnbe
setnc
setne
setng
setnge
setnl
setnle
setno
setnp
setns
setnz
seto
setp
setpo
sets
setz
sgdt
shl
shld
shr
shrd
sidt
sldt
smsw
stc
std
sti
stos
stosb
stosd
stosw
str
sub
test
verr
verw
wait
wbinvd
xadd
xchg
xlat
xlatb
xor
				}
			}
			link {
				rule = 'delphi.single_comment';
			}
			link {
				rule = 'delphi.multi_comment';
			}
			link {
				rule = 'delphi.pascal_comment';
			}
			link {
				rule = 'delphi.hex';
			}
			range {
				name = 'delphi.basm.string';
				style = 'string';
				open {
					pattern = ''';
					options = '1';
				}
				close {
					pattern = ''';
					options = '1';
				}
				close {
					pattern = '$';
					options = '1';
				}
			}
		}
	}
	outlining {
		{
			name = 'Comment';
			open = '\{';
			close = '\}';
			open_token = 'delphi.multi_comment.symbol';
		}
		{
			name = 'Comment';
			open = '\(\*';
			close = '\*\)';
			open_token = 'delphi.pascal_comment.symbol';
		}
		{
			name = 'Code';
			open = '\b(?<token>begin|case|try|asm|record|package|implementation)\b';
			close = '\b(?<token>end)\b(?>;)?';
			open_token = 'delphi.keywords';
		}
		{
			name = 'Declarations';
			open = '=(\s*?)?(?<token>class|interface)\b([^;]*)?$';
			close = '\b(?<token>end)\b(?>;)?';
			open_token = 'delphi.symbol';
			close_token = 'delphi.keywords';
		}
		{
			name = 'Loop';
			open = '\b(?<token>repeat)\b';
			close = '\b(?<token>until)\b';
			open_token = 'delphi.keywords';
		}
	}
	matching {
		{
			open = '(';
			close = ')';
			open_token = 'delphi.symbol';
		}
		{
			open = '[';
			close = ']';
			open_token = 'delphi.symbol';
		}
		{
			open = 'for';
			close = 'do';
			open_token = 'delphi.keywords';
		}
		{
			open = 'while';
			close = 'do';
			open_token = 'delphi.keywords';
		}
		{
			open = 'if';
			close = 'then';
			open_token = 'delphi.keywords';
		}
		{
			open = 'with';
			close = 'do';
			open_token = 'delphi.keywords';
		}
	}
}
